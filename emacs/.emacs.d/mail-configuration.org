* mail configuration
:PROPERTIES:
:header-args: :tangle "./personal/mail-configuration.el.gpg" :mkdirp yes :results pp :wrap "src emacs-lisp :tangle no"
:END:

The choose of the mail stack is the following :

 - offlineimap to fetch mails.
 - mu to index them.
 - mu4e to read them.
 - smtpmail (built-in) to send them.

This org document configure the whole stack by tangling org-blocks (extracting and saving text from this file to the appropriate configuration files). We provide examples of configuration along the way that you can copy ; some of the real data is sensitive and thus, encrypted by a process explained at the end of the document. We also defined ERT tests to test the mail setup automatically.

** global configuration

*** offlineimap                                                     :example:

The general section of offlineimaprc specify the number of accounts, the maxage controls the number maximum age of the mails to be fetched.

#+begin_src conf :tangle no :tangle-mode (identity #o600)
[general]
# adjust here the name and number of accounts
accounts = account1, account2
maxsyncaccounts = 2
ui=TTYUI
socktimeout = 60
maxage=3
# password management functions
pythonfile = ~/.offlineimap.py
#+end_src

*** pythonfile

You can specify parrwords in plain text in your configuration, and it is helpful to do so while installing the stack (if that your case you can skip that heading for now), just do not forget, once it is done, to secure your credentials.

~offlineimap~ let you use python to fetch the password of your accounts.

This bit of python is only a wrapper to call ~emacsclient~ with a function that will parse [[elisp:(info "(auth) Help for users")][the =.authinfo= file]]. 

#+begin_src python :shebang "#!/bin/python" :tangle ~/.offlineimap.py
import subprocess
def get_output(cmd):
# Bunch of boilerplate to catch the output of a command:
      pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
      (output, errout) = pipe.communicate()
      assert pipe.returncode == 0 and not errout
      return output
def get_password_emacs(host, user, port):
      cmd = "emacsclient --eval '(offlineimap-get-password \"%s\" \"%s\" \"%s\")'" % (host,user,port)
      return get_output(cmd).strip().lstrip('"').rstrip('"')
#+end_src

offlineimap will use emacs as a client, we need to start the server.

#+begin_src emacs-lisp
(server-start nil t)
#+end_src

Then we have the function to parse the =.authinfo= file.

#+NAME: offlineimap-get-password
#+begin_src emacs-lisp :tangle no
(defun offlineimap-get-password (machine user port)
  "Get the password of ~/.authinfo.gpg from its MACHINE, USER, PORT."
  (require 'netrc)
  (let* ((netrc (netrc-parse
                 (expand-file-name "~/.authinfo.gpg")))
         credentials password)
    (catch 'password
      (dolist (credentials netrc)
        (when (netrc-machine (list credentials) machine)
          (dolist (lst credentials)
            (when (and (string= (cdr (assoc "login" credentials)) user)
                       (string= (cdr (assoc "port" credentials)) port))
              (throw 'password (cdr (assoc "password" credentials))))))))))
#+end_src

I specify the passwords myself, so don't ask for saving them.

#+begin_src emacs-lisp
(setq auth-source-save-behavior nil)
#+end_src

*** main mu4e configuration

Note: This block uses noweb references.

#+begin_src emacs-lisp :noweb yes
(use-package mu4e
    :ensure nil
    :commands mu4e~start
    :load-path "/usr/local/Cellar/mu/1.4.15/share/emacs/site-lisp/mu/mu4e/"
    :custom
    (mu4e-mu-binary (expand-file-name "/usr/local/bin/mu"))
;; *** crypto
;; do you want to sign messages with pgp ?
    ;; (setq mu4e-compose-crypto-reply-policy 'sign-and-encrypt)
    (mml-secure-openpgp-sign-with-sender t)
    (mml-secure-openpgp-encrypt-to-self t)
;; *** be nice for the imap indexer
    (mu4e-compose-dont-reply-to-self t)
    (mu4e-change-filenames-when-moving t)
;; *** Fetching mail
    ;; the debian stable mu is buggy,
    ;; just verify it works reliably.
    (mu4e-get-mail-command "offlineimap")
;; *** Message view
    ;; nil to display only the headers
    ;; or the message at once
    (mu4e-split-view 'single-window)
    ;; this is more promising
    (mu4e-view-use-gnus t)
    (mu4e-headers-include-related t)
    (mu4e-headers-skip-duplicates t)
    (mu4e-headers-show-threads nil)
    (mu4e-view-show-addresses t)
    (mu4e-headers-fields
     '((:human-date . 8)
       (:from . 16)
       (:subject)))
    ;; americans will agree ?
    (mu4e-headers-date-format "%d/%m/%Y")
    (mu4e-headers-time-format "%H:%M")
    ;; enable notifications
    (mu4e-enable-mode-line t)
    ;; try to show images ?
    (mu4e-view-show-images t)
    (mu4e-view-image-max-width 800)
    ;; plain text messages
    ;; (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)
;; *** context policy
    ;; start with the first context
    ;; the contexts themselves will
    ;; be defined later
    (mu4e-context-policy 'pick-first)
    (mu4e-compose-context-policy 'automatic)
    ;; set mail user agent globally
    ;; for emacs so it is reconized for
    ;; eg send a bug report
    (mail-user-agent 'mu4e-user-agent)
;; *** sent message behavior
    ;; note this is mostly for gmail because
    ;; it already save all sent messages
    ;; we may want tune it
    ;; specifically by context
    (mu4e-sent-messages-behavior 'delete)
;; *** wrapping message body
;; visual-line-mode + auto-fill upon sending
    ;; autofill may be annoying though
    ;; also I have a known bug with it
    (mu4e-compose-format-flowed nil)
;; *** Autocomplete addresses
    (mu4e-compose-complete-addresses t)
    (mu4e-compose-complete-only-after "2020-01-01")
    (mu4e-compose-complete-only-personal t)
;; *** misc
    (mu4e-attachment-dir "~/Downloads")
    ;; don't keep message buffers around
    (message-kill-buffer-on-exit t)
    ;; use TAB and <backtab> to jump to links
    ;; works well with gnus-view
    (with-eval-after-load 'mu4e-view
      (set-keymap-parent mu4e-view-mode-map button-buffer-map))
    ;; must mu4e be verbose ?
    (mu4e-hide-index-messages t)
;; ** mu4e configurations
    :config
    ;; display message in a browser
    (add-to-list 'mu4e-view-actions
                 '("browser" . mu4e-action-view-in-browser) t)
    ;; update the database every ten minutes.
    (setq mu4e-update-interval 600)

    <<face-settings>>

;; ** mu4e initialisation
    :init

    <<mu4e-hydra>>

    <<offlineimap-get-password>>

    <<create-or-update-mu4e-context>>

    :bind
    ("<f12>" . hydra-mu4e-menu/body)
    (:map mu4e-view-mode-map
          ;; workaround a bug on
          ;; mu4e~headers-quit-buffer
          ;; with gnus-view
          ("q" . kill-this-buffer)))
#+end_src

**** an hydra menu

An hydra mimicking the mu4e-menu you can have, and calling directly a search. Eventually we can modify it as we wish.

#+NAME: mu4e-hydra
#+begin_src emacs-lisp
(defhydra hydra-mu4e-menu
  (:color blue
          ;; Call a global search everytime.
          :body-pre (progn (mu4e~start)
                           (mu4e-headers-search "flag:unread"))
          ;; I specify the format my self.       
          :hint nil)
  "
⸤_j_⸣ump \
⸤_s_⸣earch \
⸤_C_⸣ompose \
⸤_b_⸣ookmarks \
⸤_;_⸣Switch Context \
⸤_U_⸣pdate \
⸤_N_⸣ews \
⸤_A_⸣bout \
⸤_H_⸣elp"
  ;; Use call-interactively
  ;; to benefit from the
  ;; interactive specification
  ;; of the functions.
  ("j" (call-interactively #'mu4e~headers-jump-to-maildir))
  ("s" (call-interactively #'mu4e-headers-search))
  ("C" (call-interactively #'mu4e-compose-new))
  ("b" (call-interactively #'mu4e-headers-search-bookmark))
  (";" (call-interactively #'mu4e-context-switch))
  ("U" (call-interactively #'mu4e-update-mail-and-index))
  ("N" (call-interactively #'mu4e-news))
  ("A" (call-interactively #'mu4e-about))
  ("H" (call-interactively #'mu4e-display-manual)))
#+end_src

**** smtpmail and debugging.

The smtpmail variables will be set by the mu4e-context mechanism ; still it is worth noting that you can enable debugging with the variables ~smtpmail-debug-verb~ and ~smtpmail-debug-info~. ~mu4e~ can also gives you logs with the commands ~mu4e-toggle-logs~ and ~mu4e-show-logs~.

#+begin_src emacs-lisp
(use-package smtpmail
    :ensure nil
    :custom
    ;; start in normal mode (default)
    ;; (smtpmail-queue-mail nil)
;; *** debugging
    ;; (smtpmail-debug-verb t)
    ;; (smtpmail-debug-info t)
;; *** actually sending mail
    (message-send-mail-function
     'smtpmail-send-it))
#+end_src

**** rich text emails and org integration

#+begin_src emacs-lisp
(use-package org-mu4e
    :ensure nil
    :after mu4e
    :custom
    (org-mu4e-convert-to-html t)
    :bind
    (:map mu4e-headers-mode-map
          ("C-c c" . org-mu4e-store-and-capture))
    (:map mu4e-view-mode-map
          ("C-c c" . org-mu4e-store-and-capture)))
#+end_src

**** faces settings

This rude little function colors the mails in function of their fields to separate visually the differents contexts. The ~mu4e-accounts-colors~ variable is set later, with the differents contexts.

#+NAME: face-settings
#+begin_src emacs-lisp :tangle no :results silent
;; * faces
(defvar mu4e-accounts-colors nil)

(defun mu4e-headers-line-apply-accounts-face (msg line)
  "Apply a foreground face to the header in function of
`mu4e-accounts-colors'."
  ;; loop over the fields
  ;; so it distincts also
  ;; our own accounts if
  ;; ever we send a mail
  ;; between them
  (let ((fields '(:from :to :cc :bcc)))
    (catch 'found
      (dolist (field fields)
        ;; found the face
        (dolist (account mu4e-accounts-colors)
          (when (mu4e-message-contact-field-matches
                 msg field
                 (car account))
            (add-face-text-property
             0 (length line)
             `(:foreground ,(cdr account))
             t line)
            (throw 'found t)))))
    ;; always returns the line
    line))

(add-to-list 'mu4e~headers-line-handler-functions
             'mu4e-headers-line-apply-accounts-face)
#+end_src

*** offlineimap test & usage

This first test checks if offlineimap fetch the mails without error.

The way to use theses tests is to simply, load the test file, then call ~ert~, specifying =t= to launch all tests.

Note: exits codes for msmtp are the same as sendmail and are defined in =/usr/include/sysexits.h=.

#+begin_src emacs-lisp :tangle ~/mail.test.el :eval no
(require 'ert)
(require 'mu4e)
(mu4e~start)

(ert-deftest mail-test-offlineimap ()
    "offlineimap should exit normally"
  (should (eq
           (call-process-shell-command
            "offlineimap")
           0)))
#+end_src

*** personal data                                                     :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA63nEC0fdHGcARAA5oIfC5E1QwegeHYysVhB1jaN4QcATxFPAqJ0ueYMS1lC
f7iQetQNDd23E1FEnLf8X5gsFs8ubAXk39C8JmqKV4GIaNUeEp5DJHC1LhwylB/H
V66/R0eVEpLVOg0heulAGy2oTVuWDa2oFo5HrIzbUbgx+KA4WwM+DnerEac61lz9
hY8YAZ5vk3ZGb5RmXaU/kDK78C9eNTqDkWQhIavs2fDfxS/xRYJwXIkRZsAoIBqU
9bZBhzzL/fzL0pHJpJXeku7r8qNsF5mLiMrClfwdK15mfGM7r8IAgUzlMfxrB1IO
5Yh3h0cJxKzt96HePAlcaLQ10pqzmxju4hSFs2VaiuEAKCLs7d07+JcuiSqTZapa
XeGSwsEXt0hdkFuK3W4DABCW/MueoIJN/ikRxrxCJLrDfXqEMWDNyJtPzLUQmWnb
CxnnZh+Ax+3ZCOySzNDHFItGrlL/M2m6/32U9gjWz2TYrV1fVssVFi0EA85pV4bY
nQ5ga8e44dStmeY//ljg1rYSeCsADegEcF5EJTrmZnt1TpNhgaRnjUlAa0ydOCR9
XQxjTiiGNfAYFp6ZvpUIUW0/ehuOqEbiUvHBjLaNm9RaRUvM0F3amKOKenE31eFl
8StvqFneIi7vPOxKvv5mFUB8EqPm9PC0lgYkwioK8arlRpOadS1wVGYGbtuoC6TS
wG4BCRZka1eira7sEcovCcGaP3XDJpuINXiglN5VqNF8nFzRmpri2KiAYrDUa2sP
ehL+W6xPM2TbDBO+FGpqcGhkw7U/lst0qMxUh0/IeFOyctpzM8VBSigOaREPukea
W3rTWhAtI2L00vtMWopDA6IPRRjoqewmoX8WdzGpZ6iRBviM9/gd14GJBQusfjt2
wWIco5zWtdi9negi9Dn3VWBhh2hOBUiJAxhHYHHE6E19J33ck0cU9wRRRJARPoF9
01kgowGXopDa+WqlY4lEBcqXi8W0HH8DfJxtYFY2EjYpj8JAvbsVW7iOHphCMtgt
6cCvI50WUcfuyQBzrniorlx/p0mdWMOyueE6VRmXZHedK12dOwhfHOUCXK+ZMGEJ
GTParArQ1ODoIt+oPHHxVw==
=5OXO
-----END PGP MESSAGE-----

** accounts configuration

The account configuration consist in setting the passwords in =.authinfo=, setting the accounts in =offlineimaprc= and setting the ~mu4e-contexts~ objects that will in turn, set the builtin variables of emacs to the appropriate values when switching accounts.

[[Elisp:(info "(mu4e) Contexts example")][Editing multiple mu4e contexts as an unique sexp]] with levels and backquotes is an operation that is proportionnaly difficult to the number of contexts you add.

So here an helper function to get one context at a time based on the context-name, while preventing us to dupplicate contexts on multiple evaluation that may happen when tweaking the settings, it also allows us to separate the configuration of each mail account in separate blocks.

#+NAME: create-or-update-mu4e-context
#+begin_src emacs-lisp :tangle no :results silent
;; * helper
(cl-defun create-or-update-mu4e-context
    (&key name enter-func leave-func match-func vars)
  "Wrapper around `make-mu4e-context',
to make a mu4e-context at a time,
update the `mu4e-contexts' list,
while avoiding duplicating elements
with the same context name."
  (let ((new-context
         (make-mu4e-context
          :name       name
          :enter-func enter-func
          :leave-func leave-func
          :match-func match-func
          :vars       vars)))
    ;; try to find if this
    ;; context is already here
    (if-let
        ((mu4e-context
          (catch 'context
            (dolist (mu4e-context mu4e-contexts)
              (when (string=
                     name
                     (mu4e-context-name mu4e-context))
                (throw 'context mu4e-context))))))
        ;; so replace the old with the new
        (setf (car (memq mu4e-context mu4e-contexts))
              new-context)
      ;; otherwise push the new
      (push new-context mu4e-contexts))
    new-context))
#+end_src

The next blocks will be tangled into =mu4e-personal-context.el.gpg=, in the same directory. They produce on evaluation a pretty-printed result to let us inspect their correctness.

If you changed of contexts names, you can always start again from 0 by erasing the whole list :

#+begin_src emacs-lisp :results silent
(setq mu4e-contexts nil)
#+end_src

** example accounts                                                 :example:

Here follow two dummy accounts that you can adapt and multiply for your own purpose.

*** 2077snaillazy@gmail.com

**** offlineimap 

This block is meant to be tangled with =:tangle ~/.offlineimaprc :tangle-mode (identity #o600)=.

#+begin_src conf :tangle no
[Account 2077snaillazy]
localrepository = Local-2077snaillazy
remoterepository = Remote-2077snaillazy

[Repository Local-2077snaillazy]
type = Maildir
localfolders = ~/.mail/2077snaillazy

[Repository Remote-2077snaillazy]
type = Gmail
remotehost = imap.gmail.com
remoteuser = 2077snaillazy@gmail.com
remotepass = ASSkCe9cE5VZccTzm16oqyBzkXCHlOEbFu0SjqSmN
#remotepasseval = get_password_emacs("imap.gmail.com", "2077snaillazy", "993")
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 2
folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail']
#+end_src

**** authinfo

This block is meant to be tangled with =:tangle ~/.authinfo.gpg=.

#+begin_src conf :tangle no
machine smtp.gmail.com login 2077snaillazy@gmail.com port 587 password <insert-here-you-password>
machine imap.gmail.com login 2077snaillazy@gmail.com port 993 password <insert-here-you-password>
#+end_src

**** mu4e context

This block is meant to be tangled with the global directive at the top of the file : =:tangle "./personal/mail-configuration.el.gpg"=

#+begin_src emacs-lisp :tangle no
;; * 2077snaillazy@gmail.com
(with-eval-after-load 'mu4e

  ;; set the colors
  (setf (alist-get "lazysnail2077@gmail.com"
                   mu4e-accounts-colors
                   nil nil #'string=)
        "green")

  (create-or-update-mu4e-context
   ;; I use the context-name
   ;; as name for folders and
   ;; name of msmtp accounts
   :name "2077snaillazy"
   ;; ** functions
   :enter-func
   (lambda ()
     (mu4e-message
      "Hello 2077snaillazy@gmail.com"))
   :leave-func
   (lambda ()
     (mu4e-message
      "Bye 2077snaillazy@gmail.com"))
   :match-func
   (lambda (msg)
      (when msg
        (when msg
          (mu4e-message-contact-field-matches
           msg
           '(:from :to :cc :bcc)
           "2077snaillazy@gmail.com"))))
   :vars
   `((user-mail-address . "2077snaillazy@gmail.com")
     (user-full-name . "Snail Lazy")
     (mu4e-compose-signature
      . "")
     ;; **  inbox settings
     ;; initialise the folders otherwise
     ;; it will uses and creates defaults ones
     (mu4e-trash-folder
      . "/2077snaillazy/[Gmail].Trash")
     (mu4e-sent-folder
      . "/2077snaillazy/[Gmail].Sent Mail")
     (mu4e-drafts-folder
      . "/2077snaillazy/[Gmail].Drafts")
     (mu4e-maildir-shortcuts
      . (("/2077snaillazy/INBOX" . ?i)
         ("/2077snaillazy/[Gmail].Trash" . ?t)
         ("/2077snaillazy/[Gmail].Sent Mail" . ?s)
         ("/2077snaillazy/[Gmail].Spam" . ?S)))
     ;; **  msmtp configuration
     (smtpmail-smtp-user
      . "2077snaillazy@gmail.com")
     (smtpmail-mail-address
      . "2077snaillazy@gmail.com")
     (smtpmail-smtp-server
      . "smtp.gmail.com")
     (smtpmail-smtp-service . 587))))
#+end_src

**** tests

This block is meant to be tangled with =:tangle ~/mail.test.el=.

#+begin_src emacs-lisp :tangle no :eval no
(ert-deftest mail-test-account-1 ()
    "Testing sending mails with account 1"
  ;; should not produce an error
  (should
   (save-window-excursion
    (mu4e-context-switch 'force "2077snaillazy")
    (mu4e-compose-new)
    (insert "lazysnail2077@gmail.com")
    (next-line)
    (insert "mail-test-account-1")
    (message-send-and-exit))))
#+end_src

*** lazysnail2077@gmail.com
**** offlineimap

This block is meant to be tangled with =:tangle ~/.offlineimaprc :tangle-mode (identity #o600)=

#+begin_src conf :tangle no
[Account lazysnail2077]
localrepository = Local-lazysnail2077
remoterepository = Remote-lazysnail2077

[Repository Local-lazysnail2077]
type = Maildir
localfolders = ~/.mail/lazysnail2077

[Repository Remote-lazysnail2077]
type = Gmail
remotehost = imap.gmail.com
remoteuser = lazysnail2077@gmail.com
remotepass = <insert-here-you-password>
# once done, secure them with eg :
#remotepasseval = get_password_emacs("imap.gmail.com", "lazysnail2077", "993")
ssl = yes
# This vary on operating systems.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 2
# folder(s)? to exclude
# All Mail seems to be a constant source of duplicates
folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail']
#+end_src

**** authinfo

This block is meant to be tangled with =:tangle ~/.authinfo.gpg=.

#+begin_src conf :tangle no
machine smtp.gmail.com login lazysnail2077@gmail.com port 587 password <insert-here-you-password>
machine imap.gmail.com login lazysnail2077@gmail.com port 993 password <insert-here-you-password>
#+end_src

**** mu4e context

This block is meant to be tangled with the global directive at the top of the file : =:tangle "./personal/mail-configuration.el.gpg"=

#+begin_src emacs-lisp :tangle no
;; * lazysnail2077@gmail.com
(with-eval-after-load 'mu4e

  ;; set the colors
  (setf (alist-get "lazysnail2077@gmail.com"
                   mu4e-accounts-colors
                   nil nil #'string=)
        "red")

  (create-or-update-mu4e-context
   ;; I use the context-name
   ;; as name for folders and
   ;; name of msmtp accounts
   :name "lazysnail2077"
   ;; ** functions
   :enter-func
   (lambda ()
     (mu4e-message
      "Hello lazysnail2077@gmail.com"))
   :leave-func
   (lambda ()
     (mu4e-message
      "Bye lazysnail2077@gmail.com"))
   :match-func
   (lambda (msg)
      (when msg
        (when msg
          (mu4e-message-contact-field-matches
           msg
           '(:from :to :cc :bcc)
           "lazysnail2077@gmail.com"))))
   :vars
   `((user-mail-address . "lazysnail2077@gmail.com")
     (user-full-name . "Snail Lazy")
     (mu4e-compose-signature
      . "")
     ;; **  inbox settings
     ;; initialise the folders otherwise
     ;; it will uses and creates defaults ones
     (mu4e-trash-folder
      . "/lazysnail2077/[Gmail].Trash")
     (mu4e-sent-folder
      . "/lazysnail2077/[Gmail].Sent Mail")
     (mu4e-drafts-folder
      . "/lazysnail2077/[Gmail].Drafts")
     (mu4e-maildir-shortcuts
      . (("/lazysnail2077/INBOX" . ?i)
         ("/lazysnail2077/[Gmail].Trash" . ?t)
         ("/lazysnail2077/[Gmail].Sent Mail" . ?s)
         ("/lazysnail2077/[Gmail].Spam" . ?S)))
     ;; **  msmtp configuration
     (smtpmail-smtp-user
      . "lazysnail2077@gmail.com")
     (smtpmail-mail-address
      . "lazysnail2077@gmail.com")
     (smtpmail-smtp-server
      . "smtp.gmail.com")
     (smtpmail-smtp-service . 587))))
#+end_src

**** tests 

This block is meant to be tangled with =:tangle ~/mail.test.el=.

#+begin_src emacs-lisp :tangle no :eval no
(ert-deftest mail-test-account-2 ()
    "Testing sending mails with account 2"
  ;; should not produce an error
  (should
   (save-window-excursion
    (mu4e-context-switch 'force "lazysnail2077")
    (mu4e-compose-new)
    (insert "2077snaillazy@gmail.com")
    (next-line)
    (insert "mail-test-account-2")
    (message-send-and-exit))))
#+end_src

** personal data                                                      :crypt:
-----BEGIN PGP MESSAGE-----

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
7lPyMci6nf/2Oa9URQ==
=non/
-----END PGP MESSAGE-----

** provide

#+begin_src emacs-lisp :results silent
;; * end
(provide 'mail-configuration)
#+end_src

** calendar
*** mu4e-icalendar
#+begin_src emacs-lisp
  ;; is org-agenda must be loaded before icalendar ?
  (use-package mu4e-icalendar
    :ensure nil
    :config
    (require 'org-agenda)
    (mu4e-icalendar-setup)
    (setq gnus-icalendar-org-capture-file "/Users/karthikbalasubramanian/Google Drive/GTD/calendar/
  kartbala_gmail_calendar.org")
    ;; make sure to create Calendar heading first
    (setq gnus-icalendar-org-capture-headline '("Calendar"))
    (gnus-icalendar-org-setup)
    ;; Optional
    ;; (setq mu4e-icalendar-trash-after-reply t)
  )
#+end_src
*** org-gcal                                                          :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA63nEC0fdHGcAQ//fqIiAXD6NXXadxlwFXYKgUVe822t1XgpOj8uRzb0MUIF
JjGdwhWkICTNzj8FM6oK4HrwYUi1RL+Rilc/EHELSRSCKpgHBMIoxVluZKtSF5fC
ypWvgiS8L6/8TcOQUUp53XYW9mX6OLWdtp5e7+gmWQD4+nSB8cwq48RWgmqNSCRw
SsSReB+ai30ucgFZAIZzTbr/NxqC52Wr7vygDHArRl82n8Hhwg36abPTriFGJVlv
hIFbHVVmHt8AfdMpqjxX3wBikhl4tR74IU2U+ug3tB6oGIhPj0dQUYjRJw0FtLGT
Slbyb/OtM1LHgtXBI6yJz/Pq8zjR/WOTiiLvcz4yzfy2fQWv+gC7+yPFIe8k5uZp
jMFCII43PxZHRIZ5uxxujAtudUW86BlIy6iDmsMmYaNpKhhkn941Gv27ymnHfQNm
/sdPEGh0X5xfQAsR3Ox1MOWWQZ2uP6mGxnJ+imrhQ84MvBz3/BZH73LaZH+Pzqfn
Ax4w14MyDhqdMiRSl+eqwOdcvk7CUoddbn8s7OS5oM9MGR0QCjXOGA+XaTbwh/Ck
DSKkh0XPtFQ6C+j+OB19ptK+b7XtZgVtQspp4sqRymTgF5ZrPUXUag0MtRvAMsbj
2kJLsQfd05lkLDecgDHeI8vQaRco3fKANls/BSeLxtSBYhPTogvDTKIpnMGMVxHS
6QFevebld7kFQvgQ3psln4MJbzWZPeLFDdLC9y+GRradszre7dKk98G1vCCMdDcR
O7obRVAZQSL/jSi7vLMsEkARBeAhVuA8NEYepdRpYK7SEGK8IcqpaGUudqTz/YpG
I1d71Kuqo+fFwMfQNbI/uU9DOF9pgMEiQY/ef0uZY0mlHDrFP0AY2ugHmx8gjL8f
TeN/oDPdu82dQWPQ0K0pWM26HLFfcc3DMjeEejwe4k/ZSI6GwX46xVCoMKvsZTXH
ThUdiKWzEf2ZIDNv4XFZOAkvpPSIZq1utxPvwNQBc4+fnwUG85hV2n5Zth/B24xr
2tK9OZ0q5QFvQIxrLElbV+VqYpT5+WlKbSuiBxspHcDzmT0VRrxG0DNNpCKd75oW
+moCqGudWdAbj+0zpSUszKLPW3/iOKJ2Gk5a5VM/2RCtOn0IiYs0MpbfrO4pyj6M
SQXeLvO9O7snkncqgo/R6gr+qf3gfcYKkJOgLpeV8bISk8RtBy8JN5UjnpFVDWSB
lh3XYLgF+8Hy+4zZoKfc2DrbQSL0ck1n+27f3/rB9CapxWYyDgCoQXlmKQQ0ouQI
VAiELUarhMJ8YcZzTrrcW5jHerq5rkm3YCKwIkdLCE9Ii4Sj32qGzACG5Q8P/4a/
m5eoVL/Rhzn8VFSpVLGyoXtbKu1ERKCHec294ayV05oKNoexFIyqxtweT7J3g5xa
kaQYBJvQCPvetBB2kR2b55H0GGJ63p9szymxr1kyLjPp95+Dk6VhzA==
=RlP/
-----END PGP MESSAGE-----

** excorporate

#+begin_src emacs-lisp :results silent :tangle no
(use-package excorporate
  :after org-agenda
  :config
  (setq-default excorporate-configuration
                '(("karthik.b@howard.edu" . "https://outlook.office365.com/EWS/Exchange.asmx"))
                org-agenda-include-diary t)
  ;; activate excorporate and request
  ;; user/password to start the connexion
  (excorporate)
  ;; enable the diary integration
  ;; (i.e. write exchange calendra to emacs
  ;; diary-file)
  (excorporate-diary-enable))
#+end_src

** file variables

~org-crypt~ comes with a function that you may enable, ~org-crypt-use-before-save-magic~ that simply put ~org-encrypt-entries~ locally on org-mode buffer's ~before-save-hook~. That may be what you want to encrypt your notes, however in the case of a litteral configuration we want rather theses entries to be decrypted while tangling to encrypted files, and be encrypted in the org file on save.

I use an org-block only to format that code more nicely than in a file variable declaration.

#+NAME: tangling-hook
#+begin_src emacs-lisp :tangle no
(auto-save-mode 0)
(org-decrypt-entries)
(set-buffer-modified-p nil)
(org-babel-tangle)
(org-encrypt-entries)
(set-buffer-modified-p nil)
#+end_src 

# Local Variables:
# after-save-hook: (lambda () (org-sbe "tangling-hook"))
# End:
