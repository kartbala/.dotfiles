* mail configuration
:PROPERTIES:
:header-args: :tangle "~/.emacs.d/personal/mail-configuration.el.gpg" :mkdirp yes :results pp :wrap "src emacs-lisp :tangle no"
:END:

The choose of the mail stack is the following :

 - Offlineimap to fetch mails.
 - mu to index them.
 - mu4e to read them.
 - smtpmail (built-in) to send them.

This org document configure the whole stack by tangling org-blocks (extracting and saving text from this file to the appropriate configuration files). We provide examples of configuration along the way that you can copy ; some of the real data is sensitive and thus, encrypted by a process explained at the end of the document. We also defined ERT tests to test the mail setup automatically.

** global configuration

*** offlineimap                                                     :example:

The general section of offlineimaprc specify the number of accounts, the maxage controls the number maximum age of the mails to be fetched.

#+begin_src conf :tangle no :tangle-mode (identity #o600)
[general]
# adjust here the name and number of accounts
accounts = account1, account2
maxsyncaccounts = 2
ui=TTYUI
socktimeout = 60
maxage=3
# password management functions
pythonfile = ~/.offlineimap.py
#+end_src

*** pythonfile

You can specify passwords in plain text in your configuration, and it is helpful to do so while installing the stack (if that your case you can skip that heading for now), just do not forget, once it is done, to secure your credentials.

~offlineimap~ let you use python to fetch the password of your accounts.

This bit of python is only a wrapper to call ~emacsclient~ with a function that will parse [[elisp:(info "(auth) Help for users")][the =.authinfo= file]]. 

#+begin_src python :shebang "#!/bin/python" :tangle "../offlineimap.py"
import subprocess
def get_output(cmd):
# Bunch of boilerplate to catch the output of a command:
      pipe = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
      (output, errout) = pipe.communicate()
      assert pipe.returncode == 0 and not errout
      return output
def get_password_emacs(host, user, port):
      cmd = "emacsclient --eval '(offlineimap-get-password \"%s\" \"%s\" \"%s\")'" % (host,user,port)
      return get_output(cmd).strip().lstrip('"').rstrip('"')
#+end_src

offlineimap will use emacs as a client, we need to start the server.

#+begin_src emacs-lisp
(server-start nil t)
#+end_src

Then we have the function to parse the =.authinfo= file.

#+NAME: offlineimap-get-password
#+begin_src emacs-lisp :tangle no
(defun offlineimap-get-password (machine user port)
  "Get the password of ~/.authinfo.gpg from its MACHINE, USER, PORT."
  (require 'netrc)
  (let* ((netrc (netrc-parse
                 (expand-file-name "~/.authinfo.gpg")))
         credentials password)
    (catch 'password
      (dolist (credentials netrc)
        (when (netrc-machine (list credentials) machine)
          (dolist (lst credentials)
            (when (and (string= (cdr (assoc "login" credentials)) user)
                       (string= (cdr (assoc "port" credentials)) port))
              (throw 'password (cdr (assoc "password" credentials))))))))))
#+end_src

I specify the passwords myself, so don't ask for saving them.

#+begin_src emacs-lisp
(setq auth-source-save-behavior nil)
#+end_src

*** main mu4e configuration

Note: This block uses noweb references.

#+begin_src emacs-lisp :noweb yes
(use-package mu4e
    :ensure nil
    :commands mu4e~start
    :load-path "/usr/local/Cellar/mu/1.6.6/share/emacs/site-lisp/mu/mu4e/"
    :custom
    (mu4e-mu-binary (expand-file-name "/usr/local/bin/mu"))
;; *** crypto
;; do you want to sign messages with pgp ?
    ;; (setq mu4e-compose-crypto-reply-policy 'sign-and-encrypt)
    (mml-secure-openpgp-sign-with-sender t)
    (mml-secure-openpgp-encrypt-to-self t)
;; *** be nice for the imap indexer
    (mu4e-compose-dont-reply-to-self t)
    (mu4e-change-filenames-when-moving t)
;; *** Fetching mail
    ;; the debian stable mu is buggy,
    ;; just verify it works reliably.
    (mu4e-get-mail-command "offlineimap")
;; *** Message view
    ;; nil to display only the headers
    ;; or the message at once
    (mu4e-split-view 'single-window)
    ;; this is more promising
    (mu4e-view-use-gnus t)
    (mu4e-headers-include-related t)
    (mu4e-headers-skip-duplicates t)
    (mu4e-headers-show-threads nil)
    (mu4e-view-show-addresses t)
    (mu4e-headers-fields
     '((:human-date . 8)
       (:from . 16)
       (:subject)))
    ;; americans will agree ?
    (mu4e-headers-date-format "%d/%m/%Y")
    (mu4e-headers-time-format "%H:%M")
    ;; enable notifications
    (mu4e-enable-mode-line t)
    ;; try to show images ?
    (mu4e-view-show-images t)
    (mu4e-view-image-max-width 800)
    ;; plain text messages
    ;; (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)
;; *** context policy
    ;; start with the first context
    ;; the contexts themselves will
    ;; be defined later
    (mu4e-context-policy 'pick-first)
    (mu4e-compose-context-policy 'automatic)
    ;; set mail user agent globally
    ;; for emacs so it is reconized for
    ;; eg send a bug report
    (mail-user-agent 'mu4e-user-agent)
;; *** sent message behavior
    ;; note this is mostly for gmail because
    ;; it already save all sent messages
    ;; we may want tune it
    ;; specifically by context
    (mu4e-sent-messages-behavior 'delete)
;; *** wrapping message body
;; visual-line-mode + auto-fill upon sending
    ;; autofill may be annoying though
    ;; also I have a known bug with it
    (mu4e-compose-format-flowed nil)
;; *** Autocomplete addresses
    (mu4e-compose-complete-addresses t)
    (mu4e-compose-complete-only-after "2020-01-01")
    (mu4e-compose-complete-only-personal t)
;; *** misc
    (mu4e-attachment-dir "~/Downloads")
    ;; don't keep message buffers around
    (message-kill-buffer-on-exit t)
    ;; use TAB and <backtab> to jump to links
    ;; works well with gnus-view
    (with-eval-after-load 'mu4e-view
      (set-keymap-parent mu4e-view-mode-map button-buffer-map))
    ;; must mu4e be verbose ?
    (mu4e-hide-index-messages t)
;; ** mu4e configurations
    :config
    ;; Attaching files from dired with C-c C-a
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
    ;; display message in a browser
    (add-to-list 'mu4e-view-actions
                 '("browser" . mu4e-action-view-in-browser) t)
    ;; update the database every ten minutes.
    (setq mu4e-update-interval 6000)

    <<face-settings>>

;; ** mu4e initialisation
    :init

    <<mu4e-hydra>>

    <<offlineimap-get-password>>

    <<create-or-update-mu4e-context>>

    :bind
    ("<f12>" . hydra-mu4e-menu/body)
    (:map mu4e-view-mode-map
          ;; workaround a bug on
          ;; mu4e~headers-quit-buffer
          ;; with gnus-view
          ("q" . kill-this-buffer)))
#+end_src

**** an hydra menu

An hydra mimicking the mu4e-menu you can have, and calling directly a search. Eventually we can modify it as we wish.

#+NAME: mu4e-hydra
#+begin_src emacs-lisp
(defhydra hydra-mu4e-menu
  (:color blue
          ;; Call a global search everytime.
          :body-pre (progn (mu4e~start)
                           (mu4e-headers-search "flag:unread"))
          ;; I specify the format my self.       
          :hint nil)
  "
⸤_j_⸣ump \
⸤_s_⸣earch \
⸤_C_⸣ompose \
⸤_b_⸣ookmarks \
⸤_;_⸣Switch Context \
⸤_U_⸣pdate \
⸤_N_⸣ews \
⸤_A_⸣bout \
⸤_H_⸣elp"
  ;; Use call-interactively
  ;; to benefit from the
  ;; interactive specification
  ;; of the functions.
  ("j" (call-interactively #'mu4e~headers-jump-to-maildir))
  ("s" (call-interactively #'mu4e-headers-search))
  ("C" (call-interactively #'mu4e-compose-new))
  ("b" (call-interactively #'mu4e-headers-search-bookmark))
  (";" (call-interactively #'mu4e-context-switch))
  ("U" (call-interactively #'mu4e-update-mail-and-index))
  ("N" (call-interactively #'mu4e-news))
  ("A" (call-interactively #'mu4e-about))
  ("H" (call-interactively #'mu4e-display-manual)))
#+end_src

**** smtpmail and debugging.

The smtpmail variables will be set by the mu4e-context mechanism ; still it is worth noting that you can enable debugging with the variables ~smtpmail-debug-verb~ and ~smtpmail-debug-info~. ~mu4e~ can also gives you logs with the commands ~mu4e-toggle-logs~ and ~mu4e-show-logs~.

#+begin_src emacs-lisp
(use-package smtpmail
    :ensure nil
    :custom
    ;; start in normal mode (default)
    ;; (smtpmail-queue-mail nil)
;; *** debugging
    ;; (smtpmail-debug-verb t)
    ;; (smtpmail-debug-info t)
;; *** actually sending mail
    (message-send-mail-function
     'smtpmail-send-it))
#+end_src

**** rich text emails and org integration

#+begin_src emacs-lisp
(use-package org-mu4e
    :ensure nil
    :after mu4e
    :custom
    (org-mu4e-convert-to-html t)
    :bind
    (:map mu4e-headers-mode-map
          ("C-c c" . org-mu4e-store-and-capture))
    (:map mu4e-view-mode-map
          ("C-c c" . org-mu4e-store-and-capture)))
#+end_src

**** COMMENT faces settings

This rude little function colors the mails in function of their fields to separate visually the differents contexts. The ~mu4e-accounts-colors~ variable is set later, with the differents contexts.

#+NAME: face-settings
#+begin_src emacs-lisp :tangle no :results silent
;; * faces
(defvar mu4e-accounts-colors nil)

(defun mu4e-headers-line-apply-accounts-face (msg line)
  "Apply a foreground face to the header in function of
`mu4e-accounts-colors'."
  ;; loop over the fields
  ;; so it distincts also
  ;; our own accounts if
  ;; ever we send a mail
  ;; between them
  (let ((fields '(:from :to :cc :bcc)))
    (catch 'found
      (dolist (field fields)
        ;; found the face
        (dolist (account mu4e-accounts-colors)
          (when (mu4e-message-contact-field-matches
                 msg field
                 (car account))
            (add-face-text-property
             0 (length line)
             `(:foreground ,(cdr account))
             t line)
            (throw 'found t)))))
    ;; always returns the line
    line))

(add-to-list 'mu4e~headers-line-handler-functions
             'mu4e-headers-line-apply-accounts-face)
#+end_src

*** offlineimap test & usage

This first test checks if offlineimap fetch the mails without error.

The way to use theses tests is to simply, load the test file, then call ~ert~, specifying =t= to launch all tests.

Note: exits codes for msmtp are the same as sendmail and are defined in =/usr/include/sysexits.h=.

#+begin_src emacs-lisp :tangle ~/mail.test.el :eval no
(require 'ert)
(require 'mu4e)
(mu4e~start)

(ert-deftest mail-test-offlineimap ()
    "offlineimap should exit normally"
  (should (eq
           (call-process-shell-command
            "offlineimap")
           0)))
#+end_src

*** personal data                                                     :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA63nEC0fdHGcARAA1J6Dw+SpGtYYZPVH4MKjtbiG6dmmkZm2qHHf6YUkVYRg
4ig4iUcnfDyzIaCV+LYAi9Cv1a/+HabUa+Q2A8bnXYJ/BRSaYH93vcqRQ14JVFnF
gPHc2XcojM2Irrzvc+2lrVupmexvEdzsIIq4yaUCzSOgjqEPSI7j5lZBu5hK8W5b
qRYB30/22EZK3vg+wROfWGaDUx0Dp9X6KlJliPGNVSkuEzIObGP2Cd6EM00UtKGx
B8nP5HJCo7nsqsUekQYVkZ5NY4T3oUzl/hZoxN9c899jauXGXGGPr7pLMNqCkrvX
wXoRFRK27AdzycfjAoD8BtWxGYek8GlIigZ0d0D51qRh0ZHyk04TOMuJY3tXxJoO
wtrxthb/CkGw4bY89MAmiVlO9ZTCl8VUgbatgXwa6sRYoepQkDAF2f1ZDBorEWVp
0OfZL9g12HlR50Uq1H0pZpzr5eL8t/xWYXFPJNWQP+fNCq/Vp4LcY4bH2wPbgUHJ
rchUp8GsaW180aQShLNtvS1ucqKHe0UWQOhO1PVGSw5A+4E8lN05V6jJX3CzaIks
RYI5ktIkE7HdByzmrPeDs0VmUuPDimj5ieAGzTEZWcYXOEah4/sHXh05ibMqUYZu
LYFuMzp4PiEuN0AaumeG1bDhga86bh9gAyIBqU4+0mGHDP/nag4aonaEUSiqtK7S
wGoB7zoawnW8W7XNNGGSYBKZ+iVDZLeM4p6pHE2zhkcWbXpcwdatQzFRJYeOnvFy
JDSx0pBLGUBCsizTjCJu5btqyWOBsyZdsuHJ34AmO+bE0I24l3onnidACa2EadaF
2gTfLjsMpL9kMC5sfS2xmmaYX4Xjay243bqL/mJBNLdPGQcTCjRCvU62HroryYuK
UEPmZrNrYBPgMHVYSmPRS5UsWWZTdh01t6+0+0+9wLogGemwPk+eY6HqNMsp6Ji1
2GTAeRPMTK7Q/b5GjDAIzLxZInlkHg1EJkWKjPrhSqWRyFSDADP+vFLg5g6BOj9T
00q9V2tXzXGSq5hIZQDvJR5zMaya13dyBUqTj5r4/h7/u9h0AP5no/2u8SchitG5
iTyGSRXHir3sXuOU
=BfaJ
-----END PGP MESSAGE-----

** accounts configuration

The account configuration consist in setting the passwords in =.authinfo=, setting the accounts in =offlineimaprc= and setting the ~mu4e-contexts~ objects that will in turn, set the builtin variables of emacs to the appropriate values when switching accounts.

[[Elisp:(info "(mu4e) Contexts example")][Editing multiple mu4e contexts as an unique sexp]] with levels and backquotes is an operation that is proportionnaly difficult to the number of contexts you add.

So here an helper function to get one context at a time based on the context-name, while preventing us to dupplicate contexts on multiple evaluation that may happen when tweaking the settings, it also allows us to separate the configuration of each mail account in separate blocks.

#+NAME: create-or-update-mu4e-context
#+begin_src emacs-lisp :tangle no :results silent
;; * helper
(cl-defun create-or-update-mu4e-context
    (&key name enter-func leave-func match-func vars)
  "Wrapper around `make-mu4e-context',
to make a mu4e-context at a time,
update the `mu4e-contexts' list,
while avoiding duplicating elements
with the same context name."
  (let ((new-context
         (make-mu4e-context
          :name       name
          :enter-func enter-func
          :leave-func leave-func
          :match-func match-func
          :vars       vars)))
    ;; try to find if this
    ;; context is already here
    (if-let
        ((mu4e-context
          (catch 'context
            (dolist (mu4e-context mu4e-contexts)
              (when (string=
                     name
                     (mu4e-context-name mu4e-context))
                (throw 'context mu4e-context))))))
        ;; so replace the old with the new
        (setf (car (memq mu4e-context mu4e-contexts))
              new-context)
      ;; otherwise push the new
      (push new-context mu4e-contexts))
    new-context))
#+end_src

The next blocks will be tangled into =mu4e-personal-context.el.gpg=, in the same directory. They produce on evaluation a pretty-printed result to let us inspect their correctness.

If you changed of contexts names, you can always start again from 0 by erasing the whole list :

#+begin_src emacs-lisp :results silent
(setq mu4e-contexts nil)
#+end_src

** example accounts                                                 :example:

Here follow two dummy accounts that you can adapt and multiply for your own purpose.

*** 2077snaillazy@gmail.com

**** offlineimap 

This block is meant to be tangled with =:tangle ~/.offlineimaprc :tangle-mode (identity #o600)=.

#+begin_src conf :tangle no
[Account 2077snaillazy]
localrepository = Local-2077snaillazy
remoterepository = Remote-2077snaillazy

[Repository Local-2077snaillazy]
type = Maildir
localfolders = ~/Maildir/2077snaillazy

[Repository Remote-2077snaillazy]
type = Gmail
remotehost = imap.gmail.com
remoteuser = 2077snaillazy@gmail.com
remotepass = <insert-here-you-password>
#remotepasseval = get_password_emacs("imap.gmail.com", "2077snaillazy", "993")
ssl = yes
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 2
folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail']
#+end_src

**** authinfo

This block is meant to be tangled with =:tangle ~/.authinfo.gpg=.

#+begin_src conf :tangle no
machine smtp.gmail.com login 2077snaillazy@gmail.com port 587 password <insert-here-you-password>
machine imap.gmail.com login 2077snaillazy@gmail.com port 993 password <insert-here-you-password>
#+end_src

**** mu4e context

This block is meant to be tangled with the global directive at the top of the file : =:tangle "~/.emacs.d/personal/mail-configuration.el.gpg"=

#+begin_src emacs-lisp :tangle no
;; * 2077snaillazy@gmail.com
(with-eval-after-load 'mu4e

  ;; set the colors
  ;; (setf (alist-get "lazysnail2077@gmail.com"
  ;;                  mu4e-accounts-colors
  ;;                  nil nil #'string=)
  ;;       "green")

  (create-or-update-mu4e-context
   ;; I use the context-name
   ;; as name for folders and
   ;; name of msmtp accounts
   :name "2077snaillazy"
   ;; ** functions
   :enter-func
   (lambda ()
     (mu4e-message
      "Hello 2077snaillazy@gmail.com"))
   :leave-func
   (lambda ()
     (mu4e-message
      "Bye 2077snaillazy@gmail.com"))
   :match-func
   (lambda (msg)
      (when msg
        (when msg
          (mu4e-message-contact-field-matches
           msg
           '(:from :to :cc :bcc)
           "2077snaillazy@gmail.com"))))
   :vars
   `((user-mail-address . "2077snaillazy@gmail.com")
     (user-full-name . "Snail Lazy")
     (mu4e-compose-signature
      . "")
     ;; **  inbox settings
     ;; initialise the folders otherwise
     ;; it will uses and creates defaults ones
     (mu4e-trash-folder
      . "/2077snaillazy/[Gmail].Trash")
     (mu4e-sent-folder
      . "/2077snaillazy/[Gmail].Sent Mail")
     (mu4e-drafts-folder
      . "/2077snaillazy/[Gmail].Drafts")
     (mu4e-maildir-shortcuts
      . (("/2077snaillazy/INBOX" . ?i)
         ("/2077snaillazy/[Gmail].Trash" . ?t)
         ("/2077snaillazy/[Gmail].Sent Mail" . ?s)
         ("/2077snaillazy/[Gmail].Spam" . ?S)))
     ;; **  msmtp configuration
     (smtpmail-smtp-user
      . "2077snaillazy@gmail.com")
     (smtpmail-mail-address
      . "2077snaillazy@gmail.com")
     (smtpmail-smtp-server
      . "smtp.gmail.com")
     (smtpmail-smtp-service . 587))))
#+end_src

**** tests

This block is meant to be tangled with =:tangle ~/mail.test.el=.

#+begin_src emacs-lisp :tangle no :eval no
(ert-deftest mail-test-account-1 ()
    "Testing sending mails with account 1"
  ;; should not produce an error
  (should
   (save-window-excursion
    (mu4e-context-switch 'force "2077snaillazy")
    (mu4e-compose-new)
    (insert "lazysnail2077@gmail.com")
    (next-line)
    (insert "mail-test-account-1")
    (message-send-and-exit))))
#+end_src

*** lazysnail2077@gmail.com
**** offlineimap

This block is meant to be tangled with =:tangle ~/.offlineimaprc :tangle-mode (identity #o600)=

#+begin_src conf :tangle no
[Account lazysnail2077]
localrepository = Local-lazysnail2077
remoterepository = Remote-lazysnail2077

[Repository Local-lazysnail2077]
type = Maildir
localfolders = ~/Maildir/lazysnail2077

[Repository Remote-lazysnail2077]
type = Gmail
remotehost = imap.gmail.com
remoteuser = lazysnail2077@gmail.com
remotepass = <insert-here-you-password>
# once done, secure them with eg :
#remotepasseval = get_password_emacs("imap.gmail.com", "lazysnail2077", "993")
ssl = yes
# This vary on operating systems.
sslcacertfile = /etc/ssl/certs/ca-certificates.crt
maxconnections = 2
# folder(s)? to exclude
# All Mail seems to be a constant source of duplicates
folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail']
#+end_src

**** authinfo

This block is meant to be tangled with =:tangle ~/.authinfo.gpg=.

#+begin_src conf :tangle no
machine smtp.gmail.com login lazysnail2077@gmail.com port 587 password <insert-here-you-password>
machine imap.gmail.com login lazysnail2077@gmail.com port 993 password <insert-here-you-password>
#+end_src

**** mu4e context

This block is meant to be tangled with the global directive at the top of the file : =:tangle "~/.emacs.d/personal/mail-configuration.el.gpg"=

#+begin_src emacs-lisp :tangle no
;; * lazysnail2077@gmail.com
(with-eval-after-load 'mu4e

  ;; set the colors
  ;; (setf (alist-get "lazysnail2077@gmail.com"
  ;;                  mu4e-accounts-colors
  ;;                  nil nil #'string=)
  ;;       "red")

  (create-or-update-mu4e-context
   ;; I use the context-name
   ;; as name for folders and
   ;; name of msmtp accounts
   :name "lazysnail2077"
   ;; ** functions
   :enter-func
   (lambda ()
     (mu4e-message
      "Hello lazysnail2077@gmail.com"))
   :leave-func
   (lambda ()
     (mu4e-message
      "Bye lazysnail2077@gmail.com"))
   :match-func
   (lambda (msg)
      (when msg
        (when msg
          (mu4e-message-contact-field-matches
           msg
           '(:from :to :cc :bcc)
           "lazysnail2077@gmail.com"))))
   :vars
   `((user-mail-address . "lazysnail2077@gmail.com")
     (user-full-name . "Snail Lazy")
     (mu4e-compose-signature
      . "")
     ;; **  inbox settings
     ;; initialise the folders otherwise
     ;; it will uses and creates defaults ones
     (mu4e-trash-folder
      . "/lazysnail2077/[Gmail].Trash")
     (mu4e-sent-folder
      . "/lazysnail2077/[Gmail].Sent Mail")
     (mu4e-drafts-folder
      . "/lazysnail2077/[Gmail].Drafts")
     (mu4e-maildir-shortcuts
      . (("/lazysnail2077/INBOX" . ?i)
         ("/lazysnail2077/[Gmail].Trash" . ?t)
         ("/lazysnail2077/[Gmail].Sent Mail" . ?s)
         ("/lazysnail2077/[Gmail].Spam" . ?S)))
     ;; **  msmtp configuration
     (smtpmail-smtp-user
      . "lazysnail2077@gmail.com")
     (smtpmail-mail-address
      . "lazysnail2077@gmail.com")
     (smtpmail-smtp-server
      . "smtp.gmail.com")
     (smtpmail-smtp-service . 587))))
#+end_src

**** tests 

This block is meant to be tangled with =:tangle ~/mail.test.el=.

#+begin_src emacs-lisp :tangle no :eval no
(ert-deftest mail-test-account-2 ()
    "Testing sending mails with account 2"
  ;; should not produce an error
  (should
   (save-window-excursion
    (mu4e-context-switch 'force "lazysnail2077")
    (mu4e-compose-new)
    (insert "2077snaillazy@gmail.com")
    (next-line)
    (insert "mail-test-account-2")
    (message-send-and-exit))))
#+end_src

** personal data                                                      :crypt:
-----BEGIN PGP MESSAGE-----

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
Qw==
=LBKb
-----END PGP MESSAGE-----

** provide

#+begin_src emacs-lisp :results silent
;; * end
(provide 'mail-configuration)
#+end_src

** calendar
*** COMMENT mu4e-icalendar
#+begin_src emacs-lisp
  ;; is org-agenda must be loaded before icalendar ?
  (use-package mu4e-icalendar
    :after mu4e
    :ensure nil
    :config
    (require 'org-agenda)
    (mu4e-icalendar-setup)
    (setq gnus-icalendar-org-capture-file "/Users/karthikbalasubramanian/Google Drive/GTD/calendar/
  kartbala_gmail_calendar.org")
    ;; make sure to create Calendar heading first
    (setq gnus-icalendar-org-capture-headline '("Calendar"))
    (gnus-icalendar-org-setup)
    ;; Optional
    ;; (setq mu4e-icalendar-trash-after-reply t)
  )
#+end_src
*** org-gcal                                                          :crypt:
-----BEGIN PGP MESSAGE-----

hQIMA63nEC0fdHGcARAAvXGB62efJcjRwUxt3lF+A6M4uqJdzBW050HsCAznvaoP
5eqZkBDVgFtTIfgz4+5vkb3eN2FNGRTPwhqAo+JQN7vc7lw1Hw/EIanp4HCjGuSd
9fALaA4DhPRkla8mg96lxEoAXRQhfnw8epcr+tiK1rl7KMpKMDIFmQGSqQ6vhOCg
jVFNpYgFlsCIfdG9inGEwpaSchORuRczKJ5irTDqxCxQ6lLLy03Becm6QcWmVS0G
aj8KJJCMax+xjRzSezHzH/yGVKhrgD0TOWfUTjDW5ARSSzlRfZfJki2zEwOBXdSP
A7KRlzUEZCd1IBV94YTt+IMBab1DOM90N5Uk0C3gac1jEWNdCohxmsGJ+DRLzmLZ
ppA60/Sfn27hhkjsWFHYwt0FjzcimisFex7WA7dlOvum/TDhSY7ZZV5HuTOiiYK/
GhMikPcpnO0MpF3L2PJ0Iud/FN6uglbGBArUpRZHtOdZ15A43ePGy9BNol+K+H4g
EQgVvgAmyJhXO0z0H38QQLUD3r88AfYYQZ3Oiu7HLPCBNCZn4+i2J4u3s5LiQPjh
Slfcrak0LArue2P4618G0n0+R7y2t02zvCsKF6i28EYqgVwxmanY1z2/xYAioEyg
IWfYrmF6XFj6kw9MKoKKkxX2x/Tyw038Zw0ErPRnWbypsbxl/w0+7RbxzGu2mE3S
6QGRKIniOhBtwCS7gn569np4aJOwIYCLBOR6fXJneiYEZkroEipNNAoeHSvIJ1mq
qSzNcwilr+DFxvXlfOIPzuzGj4IILFkp1fWpUUXD06Oiy4Dwz+9I1KP4hBL/w6Na
4jGQrZYecI+/0afBWYeOOVZKboxS5dO6LXABosXRYOoeDJENG5sosPOf3uRgToNm
FTpJLM9fCydW/J2A4VziR9R2RCCI3ChvF/QsPo8B23iSuOi0otRqHJNna0leR4eh
nkJQhccSfUbwBS+XrdbzmkigneLpgewkPSSLo6VLIhbDFwB6GNQrXX104W8Rn6RI
h1aG7TaHGqHmoyyreAzukg61/FQV9kRabOG1c6+wZsFFjxdOuwpIrOwE2TxOQQdX
HnOp7q3HYuff2GRGrDlL7Y7pE5ZscJuVf+/72/6AMchpsUkEf6nECj3M97KQ3zA0
LqJIoNB20BsUwqSXL4jNJ2ILk/kDm453GwQUDGCwt3+lonW1gLPELq/GmW+MON5L
CMkW8VfYbgpSNiSV76sPyvueK135WzeJwSYjGlHoyaiEEIahDQLkTiJ49Py3UaGE
w9cczLGrmQEJXPYAlhSU+ZBPnuROYnGMdPYJWCsLiGw1Jy1PqgeLfGxk8JRPQBaa
3R8ghsqdcflyGj8IysL3LE5/EqSmN8BMYa5V4to5A7yaSVBEP1XtErib+FY4EnUK
Q9vBYKDv60VyiI6ieUH8BWEIe4Cr5383oOM1zsQ71keNQqj9JIexO5zMUTBY4Hi/
iBNDMTr3B5wkcYc=
=p7nA
-----END PGP MESSAGE-----

** directory and file variables

~org-crypt~ comes with a function that you may enable, ~org-crypt-use-before-save-magic~ that simply put ~org-encrypt-entries~ locally on org-mode buffer's ~before-save-hook~. That may be what you want to encrypt your notes, however in the case of a litteral configuration we want rather theses entries to be decrypted while tangling to encrypted files, and be encrypted in the org file on save.

Its not straightforward for ~org~ and ~epa~ to accept our key from the tangled files without prompting us each time for each target files to tangle :
 - ~epa~ expect ~epa-file-encrypt-to~ to be a local variable.
 - ~org~ write the tangled files from within a temp buffer that does not inherit local-variables.

So I define a few bits to workaround :

First let's comfort ~epa-file-write-region~ by setting locally ~epa-file-encrypt-to~. This will be evaluated in all modes of the directory.

#+NAME: epa-file-encrypt-to
#+begin_src emacs-lisp :tangle no
(setq-local epa-file-encrypt-to
            '("kartbala@gmail.com"))
#+end_src

But that not suffiscient : the temporary buffer must receive that local variable. This will be evaluated in all ~org-mode~ files of the directory.

#+NAME: epa-file-write-region/advice
#+begin_src emacs-lisp :tangle no
(advice-add 'epa-file-write-region
            :before
            #'(lambda (&rest _args)
                (hack-local-variables)))
#+end_src

~org-babel-tangle~ already trigger 3 hooks, nonetheless I add one at the very end of the function.  This will be evaluated in all ~org-mode~ files of the directory.

#+NAME: org-babel-tangle/final-hook
#+begin_src emacs-lisp :tangle no
(defun pils--tangle-final-hook (&rest _args)
  (run-hooks 'org-babel-tangle-final-hook))
(advice-add 'org-babel-tangle :after
            #'pils--tangle-final-hook)
#+end_src

Now we have all the necessity to make it happens :
  1. Decrypt before tangling.
  2. Does not save before tangling.
  3. Encrypt before saving.
  4. Save at the final step of tangling.

This will be evaluated in all ~org-mode~ files of the directory.

#+NAME: decrypt/encrypt-hooks
#+begin_src emacs-lisp :tangle no
(add-hook 'org-babel-pre-tangle-hook
          #'org-decrypt-entries t)
(remove-hook 'org-babel-pre-tangle-hook
             #'save-buffer t)
(add-hook 'before-save-hook
          #'org-encrypt-entries t)
(add-hook 'org-babel-tangle-final-hook
          #'save-buffer t)
#+end_src

Wrap it up :

#+begin_src emacs-lisp :tangle ".dir-locals.el" :noweb yes
;;; Directory Local Variables
;;; For more information see (info "(emacs) Directory Variables")

((nil ;; All modes.
  . ((eval
      . (progn
      <<epa-file-encrypt-to>>
          ))))
 (org-mode
  . ((eval
      . (progn
      <<epa-file-write-region/advice>>
      <<epa-file-write-region/advice>>
      <<org-babel-tangle/final-hook>>
      <<decrypt/encrypt-hooks>>
          )))))
#+end_src

# Local Variables:
# eval: (auto-save-mode 0)
